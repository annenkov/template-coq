(*i camlp4deps: "parsing/grammar.cma" i*)
(*i camlp4use: "pa_extend.cmp" i*)

DECLARE PLUGIN "template_coq"

{

open Attributes
open Ltac_plugin
open Names

(** Calling Ltac **)

let ltac_lcall tac args =
  let (location, name) = Loc.tag (Names.Id.of_string tac)
    (* Loc.tag @@ Names.Id.of_string tac *)
  in
  Tacexpr.TacArg(CAst.make ?loc:location (Tacexpr.TacCall
                              (CAst.make (Locus.ArgVar (CAst.make ?loc:location name),args))))

open Tacexpr
open Tacinterp
open Stdarg
open Tacarg
open Genredexpr

let _ = Goptions.declare_bool_option {
  Goptions.optdepr = false;
  Goptions.optname = "Casting of propositions in template-coq";
  Goptions.optkey = ["Template";"Cast";"Propositions"];
  Goptions.optread = (fun () -> !Quoter.cast_prop);
  Goptions.optwrite = (fun a -> Quoter.cast_prop:=a);
}


let ltac_apply (f : Value.t) (args: Tacinterp.Value.t list) =
  let fold arg (i, vars, lfun) =
    let id = Names.Id.of_string ("x" ^ string_of_int i) in
    let (l,n) = (Loc.tag id) in
    let x = Reference (Locus.ArgVar (CAst.make ?loc:l n)) in
    (succ i, x :: vars, Id.Map.add id arg lfun)
  in
  let (_, args, lfun) = List.fold_right fold args (0, [], Id.Map.empty) in
  let lfun = Id.Map.add (Id.of_string "F") f lfun in
  let ist = { (Tacinterp.default_ist ()) with Tacinterp.lfun = lfun; } in
  Tacinterp.eval_tactic_ist ist (ltac_lcall "F" args)

let to_ltac_val c = Tacinterp.Value.of_constr c


let run_template_program env evm ~poly pgm =
  Run_template_monad.run_template_program_rec ~poly (fun _ -> ()) env (evm, pgm)

let fresh_env () = 
  let env = Global.env () in
  let sigma = Evd.from_env env in
  env, sigma

let to_constr_evars sigma c = EConstr.to_constr ~abort_on_undefined_evars:false sigma c
}
 
(** ********* Commands ********* *)

VERNAC COMMAND EXTEND TemplateCoq_Test_Quote CLASSIFIED AS QUERY
    | #[ poly = polymorphic ] [ "Test" "Quote" constr(def) ] ->
      { let (env, evm) = fresh_env () in
        let (evm, def) = Constrintern.interp_open_constr env evm def in
        let (evm, pgm) = EConstr.fresh_global env evm (Lazy.force Template_monad.ptmTestQuote) in
        let pgm = Constr.mkApp (EConstr.to_constr evm pgm, 
          [|Constr.mkRel 0; to_constr_evars evm def|]) in
        run_template_program env evm ~poly pgm }
END

VERNAC COMMAND EXTEND TemplateCoq_Quote_Definition CLASSIFIED AS SIDEFF
    | #[ poly = polymorphic ] [ "Quote" "Definition" ident(name) ":=" constr(def) ] ->
      { let (env, evm) = fresh_env () in
        let (evm, def) = Constrintern.interp_open_constr env evm def in
        let (evm, pgm) = EConstr.fresh_global env evm (Lazy.force Template_monad.ptmQuoteDefinition) in
        let pgm = Constr.mkApp (EConstr.to_constr evm pgm, [|Constr_quoter.TemplateCoqQuoter.quote_ident name;  Constr.mkRel 0; 
          to_constr_evars evm def; |]) in
        run_template_program env evm ~poly pgm }
END

VERNAC COMMAND EXTEND TemplateCoq_Quote_Definition_Eval CLASSIFIED AS SIDEFF
  | #[ poly = polymorphic ] [ "Quote" "Definition" ident(name) ":=" "Eval" red_expr(rd) "in" constr(def) ] ->
      { let (env, evm) = fresh_env () in
        let (evm, def) = Constrintern.interp_open_constr env evm def in
        (* TODO : implem quoting of tactic reductions so that we can use ptmQuoteDefinitionRed *)
        let (evm, rd) = Tacinterp.interp_redexp env evm rd in
	      let (evm, def) = Quoter.reduce env evm rd (to_constr_evars evm def) in
        let (evm, pgm) = EConstr.fresh_global env evm (Lazy.force Template_monad.ptmQuoteDefinition) in
        let pgm = Constr.mkApp (EConstr.to_constr evm pgm, [|Constr_quoter.TemplateCoqQuoter.quote_ident name; Constr.mkRel 0; def|]) in
        run_template_program env evm ~poly pgm }
END

VERNAC COMMAND EXTEND TemplateCoq_Quote_Recursively_Definition CLASSIFIED AS SIDEFF
  | #[ poly = polymorphic ] [ "Quote" "Recursively" "Definition" ident(name) ":=" constr(def) ] ->
      { let (env, evm) = fresh_env () in
        let (evm, def) = Constrintern.interp_open_constr env evm def in
        let (evm, pgm) = EConstr.fresh_global env evm (Lazy.force Template_monad.ptmQuoteRecDefinition) in
        let pgm = Constr.mkApp (EConstr.to_constr evm pgm, [|Constr_quoter.TemplateCoqQuoter.quote_ident name; Constr.mkRel 0; 
          to_constr_evars evm def|]) in
        run_template_program env evm ~poly pgm }
END

VERNAC COMMAND EXTEND TemplateCoq_Make_Definition CLASSIFIED AS SIDEFF
  | #[ poly = polymorphic ] [ "Make" "Definition" ident(name) ":=" constr(def) ] ->
      { let (env, evm) = fresh_env () in
        let (evm, def) = Constrintern.interp_open_constr env evm def in
        let (evm, pgm) = EConstr.fresh_global env evm (Lazy.force Template_monad.ptmMkDefinition) in
        let pgm = Constr.mkApp (EConstr.to_constr evm pgm,
          [|Constr_quoter.TemplateCoqQuoter.quote_ident name; 
            to_constr_evars evm def|]) in
        run_template_program env evm ~poly pgm }
END

VERNAC COMMAND EXTEND TemplateCoq_Make_Inductive CLASSIFIED AS SIDEFF
  | #[ poly = polymorphic ] [ "Make" "Inductive" constr(def) ] ->
      { let (env, evm) = fresh_env () in
        let (evm, def) = Constrintern.interp_open_constr env evm def in
        let (evm, pgm) = EConstr.fresh_global env evm (Lazy.force Template_monad.ptmMkInductive) in
        let pgm = Constr.mkApp (EConstr.to_constr evm pgm, 
          [|to_constr_evars evm def|]) in
        run_template_program env evm ~poly pgm }
END

VERNAC COMMAND EXTEND TemplateCoq_Run_Template_Program CLASSIFIED AS SIDEFF
  | #[ poly = polymorphic ] [ "Run" "TemplateProgram" constr(def) ] ->
      { let (env, evm) = fresh_env () in
        let (evm, def) = Constrintern.interp_open_constr env evm def in
        let pgm = to_constr_evars evm def in
        run_template_program env evm ~poly pgm }
END


(** ********* Tactics ********* *)

TACTIC EXTEND TemplateCoq_quote_term
    | [ "quote_term" constr(c) tactic(tac) ] ->
      { (* quote the given term, pass the result to t *)
        Proofview.Goal.enter begin fun gl ->
          let env = Proofview.Goal.env gl in
          let c = to_constr_evars (Proofview.Goal.sigma gl) c in
          let c = Constr_quoter.TermReify.quote_term env c in
          ltac_apply tac (List.map to_ltac_val [EConstr.of_constr c])
  end }
END

TACTIC EXTEND TemplateCoq_denote_term
    | [ "denote_term" constr(c) tactic(tac) ] ->
      { Proofview.Goal.enter (begin fun gl ->
         let evm = Proofview.Goal.sigma gl in
         let evm, c = Constr_denoter.denote_term evm (to_constr_evars evm c) in
         Proofview.tclTHEN (Proofview.Unsafe.tclEVARS evm)
	   (ltac_apply tac (List.map to_ltac_val [EConstr.of_constr c]))
      end) }
END

TACTIC EXTEND TemplateCoq_run_template_program
    | [ "run_template_program" constr(c) tactic(tac) ] ->
      { let open Proofview.Notations in
        Proofview.tclProofInfo [@ocaml.warning "-3"] >>= fun (name, poly) ->
        Proofview.Goal.enter (begin fun gl ->
         let env = Proofview.Goal.env gl in
         let evm = Proofview.Goal.sigma gl in
         let ret = ref None in
         Run_template_monad.run_template_program_rec ~poly ~intactic:true (fun x -> ret := Some x) env (evm, to_constr_evars evm c);
         match !ret with
           Some (env, evm, t) ->
            Proofview.tclTHEN
              (Proofview.Unsafe.tclEVARS evm) 
              (ltac_apply tac (List.map to_ltac_val [EConstr.of_constr t]))
         | None -> Proofview.tclUNIT ()
       end) }
END
